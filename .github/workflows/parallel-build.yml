name: Parallel Component Validation

on:
  pull_request:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  NODE_VERSION: '22.x'
  FLUTTER_VERSION: '3.24.3'

jobs:
  # ==========================================
  # PARALLEL COMPONENT VALIDATION
  # ==========================================
  
  frontend-validation:
    name: 🌐 Frontend (SvelteKit)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run check

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 1

  graphql-server-validation:
    name: 🔗 GraphQL Server (Node.js)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./graphql-server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: graphql-server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run check

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-build
          path: graphql-server/dist/
          retention-days: 1

  mobile-app-validation:
    name: 📱 Mobile App (Flutter)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Build APK (debug)
        run: flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: mobile-app-debug-apk
          path: app/build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 1

  database-validation:
    name: 🗄️ Database (MongoDB + Neo4j)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./DB
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: DB/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run database validation tests
        run: npm test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: database-test-results
          path: DB/coverage/
          retention-days: 1

  # ==========================================
  # INTEGRATION VALIDATION
  # ==========================================
  
  integration-tests:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-validation, graphql-server-validation, mobile-app-validation, database-validation]
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      neo4j:
        image: neo4j:5.0
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/testpassword

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-build'
          merge-multiple: true

      - name: Install dependencies
        run: npm ci

      - name: Start GraphQL server
        run: |
          cd graphql-server
          npm start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        env:
          NODE_ENV: test

      - name: Wait for server to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:4000/health; then
              echo "✅ Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done

      - name: Run integration tests
        run: |
          echo "Running GraphQL API integration tests..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"query":"query { __typename }"}' \
            http://localhost:4000/graphql
          
          echo "✅ Basic GraphQL query successful"

      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # ==========================================
  # DOCKER BUILD VALIDATION
  # ==========================================
  
  docker-validation:
    name: 🐳 Docker Build Validation
    runs-on: ubuntu-latest
    needs: [frontend-validation, graphql-server-validation]
    strategy:
      matrix:
        component: [frontend, server]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for ${{ matrix.component }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.component }}
          push: false
          tags: otw-${{ matrix.component }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "Testing Docker image for ${{ matrix.component }}"
          docker run --rm otw-${{ matrix.component }}:test --version || echo "✅ Image built successfully"

  # ==========================================
  # RELEASE GATE
  # ==========================================
  
  release-gate:
    name: 🚪 Release Gate
    runs-on: ubuntu-latest
    needs: [frontend-validation, graphql-server-validation, mobile-app-validation, database-validation, integration-tests, docker-validation]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Checking status of all validation jobs..."
          
          # Check if any job failed
          if [[ "${{ needs.frontend-validation.result }}" == "failure" || 
                "${{ needs.graphql-server-validation.result }}" == "failure" || 
                "${{ needs.mobile-app-validation.result }}" == "failure" || 
                "${{ needs.database-validation.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" || 
                "${{ needs.docker-validation.result }}" == "failure" ]]; then
            echo "❌ One or more validation jobs failed"
            echo "Frontend: ${{ needs.frontend-validation.result }}"
            echo "GraphQL Server: ${{ needs.graphql-server-validation.result }}"
            echo "Mobile App: ${{ needs.mobile-app-validation.result }}"
            echo "Database: ${{ needs.database-validation.result }}"
            echo "Integration: ${{ needs.integration-tests.result }}"
            echo "Docker: ${{ needs.docker-validation.result }}"
            echo ""
            echo "🚫 RELEASE BLOCKED: Fix all failures before proceeding"
            exit 1
          else
            echo "✅ All validation jobs passed successfully!"
            echo "Frontend: ✅"
            echo "GraphQL Server: ✅"
            echo "Mobile App: ✅"  
            echo "Database: ✅"
            echo "Integration: ✅"
            echo "Docker: ✅"
            echo ""
            echo "🎉 RELEASE APPROVED: All components ready for release"
          fi

      - name: Set release approval status
        if: success()
        run: |
          echo "RELEASE_APPROVED=true" >> $GITHUB_ENV
          echo "🚀 Platform is ready for release process"

  # ==========================================
  # SECURITY SCAN (Non-blocking)
  # ==========================================
  
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: [docker-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      contents: read
    continue-on-error: true  # Don't block release on security scan failures
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Auto-build for CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3